{"version":3,"file":"static/js/547.214c7b7c.chunk.js","mappings":"8RAce,SAASA,IACtB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,YAAgBC,EAAhB,EAAgBA,UAAWC,EAA3B,EAA2BA,QACrBC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAOvBC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAAaE,QAAQC,WAC5BC,SAAUJ,EAAAA,KAAaK,IAAI,GAAGF,aAQ1BG,EAAY,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KACnB,OAAO,SAAC,KAAD,CAAcA,KAAMA,EAAMC,OAAQ,SAAAC,GAAO,OAAI,uBAAIA,QAG1D,OACE,gCACGf,GAAagB,EAAAA,GAAAA,QAAA,wBAA+Bd,EAA/B,QAA+C,SAAC,KAAD,IAC5DD,GACCe,EAAAA,GAAAA,MAAY,0DACV,SAAC,KAAD,KAEJ,SAAC,KAAD,CACEC,cA3BuB,CAC3BT,MAAO,GACPE,SAAU,IA0BNQ,SAlBe,SAACC,EAAiBC,GACrCrB,EAAMoB,GACNC,EAAQC,aAiBJC,iBAAkBjB,EAHpB,UAKE,UAAC,EAAAkB,aAAD,CAAcC,aAAa,MAA3B,WACE,SAAC,EAAAC,MAAD,CAAOC,QAAQ,QAAf,oBACA,SAAC,KAAD,CAAOb,KAAK,QAAQc,KAAK,QAAQC,YAAY,iBAC7C,SAAChB,EAAD,CAAWC,KAAK,WAChB,SAAC,EAAAY,MAAD,CAAOC,QAAQ,WAAf,uBACA,SAAC,KAAD,CAAOb,KAAK,WAAWc,KAAK,WAAWC,YAAY,oBACnD,SAAChB,EAAD,CAAWC,KAAK,cAChB,SAAC,EAAAgB,eAAD,CAAgBF,KAAK,SAArB,8B,6KCrDGJ,GAAeO,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,0FAMZL,EAAQK,EAAAA,EAAAA,MAAH,6CAILD,EAAiBC,EAAAA,EAAAA,OAAH","sources":["views/LoginPage.tsx","views/StyleViews/ViewsPages.styled.ts"],"sourcesContent":["import { Formik, ErrorMessage, Field, FormikHelpers } from 'formik';\nimport {\n  RegisterForm,\n  Label,\n  RegisterButton,\n} from './StyleViews/ViewsPages.styled';\nimport * as yup from 'yup';\nimport { useLoginMutation, Request } from 'redux/authAPI';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { useSelector } from 'react-redux';\nimport { getUsername } from 'redux/authSlice';\nimport React from 'react';\nimport { FormErrorProps } from 'types/componentTypes';\n\nexport default function LoginPage() {\n  const [login, { isSuccess, isError }] = useLoginMutation();\n  const UserName = useSelector(getUsername);\n\n  const defaultInitialValues = {\n    email: '',\n    password: '',\n  };\n\n  const schema = yup.object().shape({\n    email: yup.string().email().required(),\n    password: yup.string().min(8).required(),\n  });\n\n  const handleSubmit = (values: Request, helpers: FormikHelpers<Request>) => {\n    login(values);\n    helpers.resetForm();\n  };\n\n  const FormError = ({ name }: FormErrorProps) => {\n    return <ErrorMessage name={name} render={message => <p>{message}</p>} />;\n  };\n\n  return (\n    <>\n      {isSuccess && toast.success(`Welcome back, ${UserName}!`) && <Toaster />}\n      {isError &&\n        toast.error('Oops...Check entered email or password and try again') && (\n          <Toaster />\n        )}\n      <Formik\n        initialValues={defaultInitialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <RegisterForm autoComplete=\"off\">\n          <Label htmlFor=\"email\">Email</Label>\n          <Field name=\"email\" type=\"email\" placeholder=\"Enter email\" />\n          <FormError name=\"email\" />\n          <Label htmlFor=\"password\">Password</Label>\n          <Field name=\"password\" type=\"password\" placeholder=\"Enter password\" />\n          <FormError name=\"password\" />\n          <RegisterButton type=\"submit\"> Login</RegisterButton>\n        </RegisterForm>\n      </Formik>\n    </>\n  );\n}\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\nexport const RegisterForm = styled(Form)`\n  max-width: 320px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Label = styled.label`\n  margin-top: 15px;\n`;\n\nexport const RegisterButton = styled.button`\n  margin-top: 15px;\n  margin-left: 0px;\n`;\n"],"names":["LoginPage","useLoginMutation","login","isSuccess","isError","UserName","useSelector","getUsername","schema","yup","shape","email","required","password","min","FormError","name","render","message","toast","initialValues","onSubmit","values","helpers","resetForm","validationSchema","RegisterForm","autoComplete","Label","htmlFor","type","placeholder","RegisterButton","styled","Form"],"sourceRoot":""}