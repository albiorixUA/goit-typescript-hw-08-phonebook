{"version":3,"file":"static/js/123.ed6c2252.chunk.js","mappings":"0QAYe,SAASA,IACtB,OAA2CC,EAAAA,EAAAA,MAA3C,eAAOC,EAAP,YAAmBC,EAAnB,EAAmBA,UAAWC,EAA9B,EAA8BA,QAQxBC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaI,QAAQD,WAC5BE,SAAUL,EAAAA,KAAaM,IAAI,GAAGH,aAQ1BI,EAAY,SAAC,GAA8B,IAA5BL,EAA2B,EAA3BA,KACnB,OAAO,SAAC,KAAD,CAAcA,KAAMA,EAAMM,OAAQ,SAAAC,GAAO,OAAI,uBAAIA,QAG1D,OACE,gCACGZ,GAAaa,EAAAA,GAAAA,QAAc,6BAA8B,SAAC,KAAD,IACzDZ,GAAWY,EAAAA,GAAAA,MAAY,2CACtB,SAAC,KAAD,KAEF,SAAC,KAAD,CACEC,cA5BuB,CAC3BC,SAAU,GACVR,MAAO,GACPC,SAAU,IA0BNQ,SAjBe,SAACC,EAAiBC,GACrCnB,EAASkB,GACTC,EAAQC,aAgBJC,iBAAkBlB,EAHpB,UAKE,UAAC,EAAAmB,aAAD,CAAcC,aAAa,MAA3B,WACE,SAAC,EAAAC,MAAD,CAAOC,QAAQ,OAAf,mBACA,SAAC,KAAD,CAAOnB,KAAK,OAAOoB,KAAK,OAAOC,YAAY,gBAC3C,SAAChB,EAAD,CAAWL,KAAK,UAChB,SAAC,EAAAkB,MAAD,CAAOC,QAAQ,QAAf,oBACA,SAAC,KAAD,CAAOnB,KAAK,QAAQoB,KAAK,QAAQC,YAAY,iBAC7C,SAAChB,EAAD,CAAWL,KAAK,WAChB,SAAC,EAAAkB,MAAD,CAAOC,QAAQ,WAAf,uBACA,SAAC,KAAD,CAAOnB,KAAK,WAAWoB,KAAK,WAAWC,YAAY,oBACnD,SAAChB,EAAD,CAAWL,KAAK,cAChB,SAAC,EAAAsB,eAAD,CAAgBF,KAAK,SAArB,iC,6KCtDGJ,GAAeO,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,0FAMZL,EAAQK,EAAAA,EAAAA,MAAH,6CAILD,EAAiBC,EAAAA,EAAAA,OAAH","sources":["views/RegisterPage.tsx","views/StyleViews/ViewsPages.styled.ts"],"sourcesContent":["import { Formik, ErrorMessage, Field, FormikHelpers } from 'formik';\nimport {\n  RegisterForm,\n  Label,\n  RegisterButton,\n} from './StyleViews/ViewsPages.styled';\nimport * as yup from 'yup';\nimport { useRegisterMutation, Request } from 'redux/authAPI';\nimport toast, { Toaster } from 'react-hot-toast';\nimport React from 'react';\nimport { FormErrorProps } from 'types/componentTypes';\n\nexport default function RegisterPage() {\n  const [register, { isSuccess, isError }] = useRegisterMutation();\n\n  const defaultInitialValues = {\n    username: '',\n    email: '',\n    password: '',\n  };\n\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().min(8).required(),\n  });\n\n  const handleSubmit = (values: Request, helpers: FormikHelpers<Request>) => {\n    register(values);\n    helpers.resetForm();\n  };\n\n  const FormError = ({ name }: FormErrorProps) => {\n    return <ErrorMessage name={name} render={message => <p>{message}</p>} />;\n  };\n\n  return (\n    <>\n      {isSuccess && toast.success('Registration successful') && <Toaster />}\n      {isError && toast.error('Something went wrong, try again later') && (\n        <Toaster />\n      )}\n      <Formik\n        initialValues={defaultInitialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <RegisterForm autoComplete=\"off\">\n          <Label htmlFor=\"name\">Name</Label>\n          <Field name=\"name\" type=\"text\" placeholder=\"Enter name\" />\n          <FormError name=\"name\" />\n          <Label htmlFor=\"email\">Email</Label>\n          <Field name=\"email\" type=\"email\" placeholder=\"Enter email\" />\n          <FormError name=\"email\" />\n          <Label htmlFor=\"password\">Password</Label>\n          <Field name=\"password\" type=\"password\" placeholder=\"Enter password\" />\n          <FormError name=\"password\" />\n          <RegisterButton type=\"submit\"> Register</RegisterButton>\n        </RegisterForm>\n      </Formik>\n    </>\n  );\n}\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\nexport const RegisterForm = styled(Form)`\n  max-width: 320px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Label = styled.label`\n  margin-top: 15px;\n`;\n\nexport const RegisterButton = styled.button`\n  margin-top: 15px;\n  margin-left: 0px;\n`;\n"],"names":["RegisterPage","useRegisterMutation","register","isSuccess","isError","schema","yup","shape","name","required","email","password","min","FormError","render","message","toast","initialValues","username","onSubmit","values","helpers","resetForm","validationSchema","RegisterForm","autoComplete","Label","htmlFor","type","placeholder","RegisterButton","styled","Form"],"sourceRoot":""}